import { app, BrowserWindow, desktopCapturer, ipcMain } from "electron";
import * as path from "path";
import { spawn } from "child_process";

let pythonProcess: any = null;

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

function startPythonServer() {
  const isDev = process.env.NODE_ENV === "development";

  // In development, use the resources directory in project root
  // In production, use the resources directory in app.getAppPath()
  const resourcesPath = isDev
    ? path.join(__dirname, "..", "resources", "python")
    : path.join(process.resourcesPath, "resources", "python");

  const executableName = process.platform === "win32" ? "server.exe" : "server";
  const pythonExecutable = path.join(resourcesPath, executableName);

  console.log("Starting Python server from:", pythonExecutable);

  pythonProcess = spawn(pythonExecutable);

  pythonProcess.stdout.on("data", (data: any) => {
    console.log("Python server output:", data.toString());
  });

  pythonProcess.stderr.on("data", (data: any) => {
    console.error("Python server error:", data.toString());
  });
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true,
      contextIsolation: false,
    },
  });

  // Start Python server
  startPythonServer();

  // Set CSP headers to allow connection to localhost:5000
  mainWindow.webContents.session.webRequest.onHeadersReceived(
    (details, callback) => {
      callback({
        responseHeaders: {
          ...details.responseHeaders,
          "Content-Security-Policy": [
            "default-src 'self' 'unsafe-inline' 'unsafe-eval' data:;",
            "connect-src 'self' http://localhost:5000;",
            "img-src 'self' data: http://localhost:5000;",
            "script-src 'self' 'unsafe-inline' 'unsafe-eval';",
          ].join(" "),
        },
      });
    }
  );

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === "development") {
    mainWindow.webContents.openDevTools();
  }

  // Send available screen sources to React
  ipcMain.handle("get-sources", async () => {
    const sources = await desktopCapturer.getSources({
      types: ["screen", "window"],
      thumbnailSize: { width: 320, height: 240 },
    });

    return sources.map((source) => ({
      id: source.id,
      name: source.name,
      thumbnail: source.thumbnail.toDataURL(),
    }));
  });

  ipcMain.handle("capture-source", async (_, sourceId) => {
    const sources = await desktopCapturer.getSources({
      types: ["screen", "window"],
    });
    const source = sources.find((src) => src.id === sourceId);

    if (!source) {
      console.error("Source not found!");
      return null;
    }

    // Get full-resolution image using getUserMedia
    return new Promise((resolve) => {
      navigator.mediaDevices
        .getUserMedia({
          audio: false,
          video: {
            mandatory: {
              chromeMediaSource: "desktop",
              chromeMediaSourceId: source.id,
              minWidth: 1920, // Adjust width
              minHeight: 1080, // Adjust height
              maxWidth: 3840, // High-resolution limit
              maxHeight: 2160,
              maxFrameRate: 1,
            },
          } as any,
        })
        .then((stream) => {
          const video = document.createElement("video");
          video.srcObject = stream;
          video.onloadedmetadata = () => {
            video.play();
            setTimeout(() => {
              const canvas = document.createElement("canvas");
              canvas.width = video.videoWidth;
              canvas.height = video.videoHeight;
              const ctx = canvas.getContext("2d");
              ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
              stream.getTracks().forEach((track) => track.stop());
              resolve(canvas.toDataURL("image/png"));
            }, 500);
          };
        })
        .catch((err) => {
          console.error("Failed to capture screen:", err);
          resolve(null);
        });
    });
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    if (pythonProcess) {
      pythonProcess.kill();
    }
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
